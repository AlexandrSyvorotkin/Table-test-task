{"version":3,"sources":["hooks/useServerData.js","switcher/switcher.js","svg arrows/arrowUp.js","svg arrows/arrowDown.js","detailItem/detailitem.js","search/seacrh.js","table/table.js","loader/loader.js","inputFrom/inputForm.js","tablebody/tablebody.js","paginator/paginator.js","App.js","index.js"],"names":["useServerData","url","isButtonClick","useState","contactData","setContactData","isLoading","setisLoading","isLoaded","setIsLoaded","useEffect","axios","get","then","res","data","Switcher","buttonHandler","className","onClick","ArrowUp","style","marginLeft","display","xmlns","width","height","fill","viewBox","margin-left","fillRule","d","ArrowDown","DetailedItem","detailItemData","AddressCity","address","city","AddressstreetAddres","streetAddress","AddressState","state","AddressZip","zip","id","firstName","lastName","email","phone","description","Search","onSearchSend","searchValue","setSearchValue","type","placeholder","aria-label","aria-describedby","value","onChange","event","target","Table","sortData","directionSort","detailRow","rowIsClick","fieldData","setFieldData","Arrow","fieldSortData","field","map","item","Loader","InputFrom","getInputFormData","isFromOpen","setIsFromOpen","setid","setFirstName","setLastName","setEmail","setPhone","noValidate","onSubmit","e","preventDefault","tableBody","Paginator","pages","currentPage","onNextClick","onPrevClick","buttonNextDisabled","buttonPrevDisabled","currentPageActive","currentPageNumber","href","tabIndex","p","App","setIsButtonClick","setDirectionSort","rowItem","setrowItem","setUrl","totalCountRow","setTotalCountRow","totalCountPage","setTotalCountPage","setrowIsClick","setCurrentPageNumber","setbuttonNextDisabled","setbuttonPrevDisabled","setCurrentPageActive","searchText","setSearchText","newRow","setNewRow","filtedData","filter","el","toLowerCase","includes","lastBlockRow","firstBlockRow","currentBlockRows","slice","unshift","length","getTotalCountPage","Math","ceil","i","push","copyData","concat","sort","a","b","reverse","row","text","pg","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43545ae9.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nconst useServerData = ({url, isButtonClick}) => {\r\n\r\n// const baseUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\r\n\r\n\r\nconst [contactData, setContactData] = useState([]); /* state для данных */\r\nconst [isLoading, setisLoading] = useState(false); /* state для лоадера */\r\nconst [isLoaded, setIsLoaded] = useState(false); /* state для пагинатора и вывода данных */\r\n\r\nconst getData= () => {\r\n\r\n}\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isButtonClick) {\r\n            return \r\n        }\r\n        setisLoading(true)\r\n        axios.get(url).then((res) => {\r\n                setContactData(res.data);\r\n                setisLoading(false)\r\n                setIsLoaded(true)\r\n            });\r\n    }, [url, isButtonClick]);\r\n\r\n\r\n    return [{contactData, isLoading, setContactData, setisLoading, isLoaded}, getData]\r\n}\r\n\r\nexport default useServerData;","import React from 'react';\r\nimport './switcher.css'\r\n\r\nconst Switcher = ({buttonHandler}) => {\r\n    const bigUrl = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\r\n    const smallUrl = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}'\r\n    return (\r\n        <div className=\"ButtonsBlock\">\r\n            <button className=\"btn btn-danger\" onClick={()=> (buttonHandler(smallUrl))}>SmallData</button>\r\n            <button className=\"btn btn-warning\" onClick={()=> (buttonHandler(bigUrl))}>BigData</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Switcher\r\n","import React from 'react';\r\n\r\nconst ArrowUp = () => {\r\n    return (\r\n        <div style={{marginLeft: '10px', display: 'inline'}}> \r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-up-square\" viewBox=\"0 0 16 16\" margin-left='5em'>\r\n  <path fillRule=\"evenodd\" d=\"M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 9.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z\"/>\r\n        </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArrowUp\r\n\r\n","import React from 'react';\r\n\r\nconst ArrowDown = () => {\r\n    return (\r\n        <div style={{marginLeft: '10px', display: 'inline'}}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-down-square\" viewBox=\"0 0 16 16\"> \r\n  <path fillRule=\"evenodd\" d=\"M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 2.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z\"/>\r\n        </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArrowDown\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst DetailedItem = ({detailItemData}) => {\r\n\r\n    const AddressCity = detailItemData && detailItemData.address ? detailItemData.address.city : null  \r\n    const AddressstreetAddres = detailItemData && detailItemData.address ? detailItemData.address.streetAddress : null  // Решение проблемы доступа до вложенных элементов обьекта \r\n    const AddressState = detailItemData && detailItemData.address ? detailItemData.address.state : null\r\n    const AddressZip = detailItemData && detailItemData.address ? detailItemData.address.zip : null\r\n\r\n    return (\r\n        <div> \r\n            <div>\r\n                id: <b>{detailItemData.id}</b>\r\n            </div>\r\n            <div>\r\n                firstname: <b>{detailItemData.firstName}</b>\r\n            </div>\r\n            <div>\r\n                lastname: <b>{detailItemData.lastName}</b>\r\n            </div>\r\n            <div>\r\n                email: <b>{detailItemData.email}</b>\r\n            </div>\r\n            <div>\r\n                phone: <b>{detailItemData.phone}</b>\r\n            </div>\r\n            <div>\r\n                streetAddress: <b>{AddressstreetAddres}</b>\r\n            </div>\r\n            <div>\r\n                city: <b>{AddressCity}</b>\r\n            </div>\r\n            <div>\r\n                state: <b>{AddressState}</b>\r\n            </div>\r\n            <div>\r\n                zip: <b>{AddressZip}</b>\r\n            </div>\r\n            <div>\r\n                description: <p><b>{detailItemData.description}</b></p>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedItem;","import React, {useState} from 'react';\r\n\r\nconst Search = ({onSearchSend}) => {\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n\r\n\r\n    return (\r\n        <div className=\"input-group mb-3 mt-3\">\r\n            <input \r\n                type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"Enter FirstName/LastName/email\" \r\n                aria-label=\"Recipient's username\" \r\n                aria-describedby=\"basic-addon2\"\r\n                value = {searchValue}\r\n                onChange = {(event) => {setSearchValue(event.target.value)}}\r\n            />\r\n                <div className=\"input-group-append\">\r\n                    <button \r\n                        className=\"btn btn-outline-secondary\" \r\n                        type=\"button\"\r\n                        onClick={()=>onSearchSend(searchValue)}\r\n                    >\r\n                        Search\r\n                    </button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import React, {useState} from 'react';\r\nimport ArrowUp from '../svg arrows/arrowUp';\r\nimport ArrowDown from '../svg arrows/arrowDown';\r\nimport DetailedItem from './../detailItem/detailitem';\r\nimport Search from '../search/seacrh'\r\n\r\nconst Table = ({sortData, contactData, directionSort, detailRow, detailItemData, rowIsClick, onSearchSend}) => {\r\n\r\n\tconst [fieldData, setFieldData] = useState(''); /* Используем хук useState чтобы решить проблему сортировки в стобцах используя поле field */\r\n\r\n\r\n\tconst Arrow = () => {\r\n\t\treturn (\r\n\t\t\tdirectionSort ? <ArrowDown/> : <ArrowUp/>\r\n\t\t)\r\n\t}\r\n\r\n\tconst fieldSortData = (field) => {\r\n\t\tsortData(field)\r\n\t\tsetFieldData(field)\r\n\t} \r\n\r\n    return (\r\n        <div>\r\n\t\t\t<Search onSearchSend={onSearchSend}/>\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th \r\n\t\t\t\t\t\t\tonClick={()=> {fieldSortData('id')}}>\r\n\t\t\t\t\t\t\tid { fieldData==='id' ? <Arrow/> : null}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t<th onClick={()=> {fieldSortData('firstName')}}>\r\n\t\t\t\t\t\t\tFirstName { fieldData==='firstName' ? <Arrow/> : null}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t<th onClick={()=> {fieldSortData('lastName')}}>\r\n\t\t\t\t\t\t\tLastName  { fieldData==='lastName' ? <Arrow/> : null}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t<th onClick={()=> {fieldSortData('email')}}>\r\n\t\t\t\t\t\t\temail  { fieldData==='email' ? <Arrow/> : null}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t<th onClick={()=> {fieldSortData('phone')}}>\r\n\t\t\t\t\t\t\tPhone  { fieldData==='phone' ? <Arrow/> : null}\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{contactData.map(\r\n\t\t\t\t\titem=> (\r\n\t\t\t\t\t<tr key={item.id+ item.email} onClick={() => detailRow(item)}>\r\n\t\t\t\t\t<td>{item.id}</td>\r\n\t\t\t\t\t<td>{item.firstName}</td>\r\n\t\t\t\t\t<td>{item.lastName}</td>\r\n\t\t\t\t\t<td>{item.email}</td>\r\n\t\t\t\t\t<td>{item.phone}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t{rowIsClick ? <DetailedItem \r\n\t\t\t\tdetailItemData={detailItemData}/> : null}\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport './loader.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"lds-dual-ring\"></div>\r\n    )\r\n} \r\n\r\nexport default Loader;","import React, {useState} from 'react';\r\n\r\nconst InputFrom = ({getInputFormData}) => {\r\n\r\n    const [isFromOpen, setIsFromOpen] = useState(false) /* state для кнопки которая добавляет в таблицу данные */\r\n\r\n    const [id, setid] = useState('')\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        getInputFormData({id, firstName, lastName , email, phone});\r\n    }\r\n\r\n\r\n    return (\r\n       <div>\r\n            { !isFromOpen ? \r\n                <button \r\n                className=\"btn btn-outline-secondary mt-5 mb-5\" \r\n                type=\"button\"\r\n                onClick={()=>setIsFromOpen(true)}\r\n                >\r\n                Add Contact\r\n            </button> :\r\n\r\n\r\n        <form  noValidate onSubmit={submitHandler}>\r\n    <div className=\"form-row\">\r\n                <div className=\"col-md-1 mb-3\">\r\n                    <input type=\"text\" \r\n                            className=\"form-control\"\r\n                            placeholder=\"id\"\r\n                            value={id}\r\n                            onChange={(event)=> {setid(event.target.value)}}\r\n                            />\r\n                </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n            <input type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"First name\"\r\n                value={firstName}\r\n                onChange={(event)=> {setFirstName(event.target.value)}}\r\n                />\r\n        </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" \r\n                    className=\"form-control\"\r\n                    placeholder=\"Last name\"\r\n                    value={lastName}\r\n                    onChange={(event)=> {setLastName(event.target.value)}}\r\n                    />\r\n            </div>\r\n        </div>\r\n        <div className=\"col-md-2 mb-3\">\r\n            <input type=\"text\" \r\n                className=\"form-control\" \r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(event)=> {setEmail(event.target.value)}}\r\n                />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n            <input type=\"text\" \r\n            className=\"form-control\"\r\n            placeholder=\"Phone\"\r\n            value={phone}\r\n            onChange={(event)=> {setPhone(event.target.value)}}\r\n            />\r\n        </div>\r\n    </div>\r\n  \r\n  <button className=\"btn btn-primary\" type=\"submit\">Add to table</button>\r\n</form>\r\n            }\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default InputFrom;\r\n","import React, {Fragment} from 'react';\r\nimport Table from './../table/table';\r\nimport Loader from './../loader/loader';\r\nimport InputFrom from '../inputFrom/inputForm';\r\n\r\n\r\nconst tableBody = ({contactData, sortData, directionSort, detailRow, detailItemData, isLoading, rowIsClick, onSearchSend, getInputFormData}) => {\r\n    return (\r\n        \r\n            isLoading ? <Loader/> :  /* Прогрузка лоадера или таблицы */\r\n        <Fragment>\r\n            <InputFrom getInputFormData={getInputFormData}/>\r\n            <Table \r\n                contactData={contactData} \r\n                sortData={sortData} \r\n                directionSort={directionSort}\r\n                detailRow={detailRow}\r\n                detailItemData={detailItemData}\r\n                rowIsClick={rowIsClick}\r\n                onSearchSend={onSearchSend}\r\n                />\r\n                \r\n        </Fragment>\r\n            \r\n    )\r\n}\r\n\r\nexport default tableBody","import React from 'react';\r\n\r\nconst Paginator = ({pages, currentPage, onNextClick, onPrevClick, buttonNextDisabled, buttonPrevDisabled, currentPageActive, currentPageNumber}) => {\r\n    return (\r\n        <nav aria-label=\"...\">\r\n        <ul className=\"pagination\">\r\n            <li className={`page-item ${buttonPrevDisabled}`}>\r\n                <a className=\"page-link\" href=\"#\" tabIndex=\"-1\" onClick={()=> {onPrevClick()}}>\r\n                    Previous\r\n                </a>\r\n            </li>\r\n            {\r\n                pages.map((p) => {\r\n                    return (\r\n                        <li className={(currentPageNumber===p) ? `page-item ${currentPageActive}` : `page-item`} key={p}>\r\n                            <a className=\"page-link\" href=\"#\" onClick={()=> {currentPage(p)}}>\r\n                                {p}\r\n                            </a>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            <li className={`page-item ${buttonNextDisabled}`}>\r\n                <a className=\"page-link\" href=\"#\" onClick={()=> {onNextClick()}}>\r\n                    Next\r\n                </a>\r\n            </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React, {useState, useEffect} from 'react'\nimport useServerData from './hooks/useServerData';\nimport Switcher from './switcher/switcher';\nimport Tablebody from './tablebody/tablebody';\nimport Paginator from './paginator/paginator'\n\nfunction App() {\n\n// const [contactData, setcontactData] = useState([]); /* Хук для данных */\n// const [isLoading, setisLoading] = useState(true); /* Хук для лоадера */\nconst [isButtonClick, setIsButtonClick] = useState(false) /* state для переключения загрузки данных */\nconst [directionSort, setDirectionSort] = useState(true); /* state для сортировки */\nconst [rowItem, setrowItem] = useState(''); /* state для вывода данных json по клику на строку с id */\nconst [url, setUrl] = useState('') /* state для передачи url из компонента для вывода либо больших данных либо маленьких*/\nconst [totalCountRow, setTotalCountRow] = useState(0) /* state для пагинации страниц */\nconst [totalCountPage, setTotalCountPage] = useState(0) /* state для пагинации страниц */\nconst [rowIsClick, setrowIsClick] = useState(false) /* state для вывода детализированого состояния строки в отдельный отображающийся блок */\nconst limitCountPage = 50 /* Переменная для пагинации страниц */\nconst [currentPageNumber, setCurrentPageNumber] = useState(1) /* state для работы плагинации (перемотки страниц) */\nconst [buttonNextDisabled, setbuttonNextDisabled] = useState('page-item') /* state для нумерации страниц при плагинации 'вперед' */\nconst [buttonPrevDisabled, setbuttonPrevDisabled] = useState('page-item') /* state для нумерации страниц при плагинации 'назад' */\nconst [currentPageActive, setCurrentPageActive] = useState('page-item') /* state для отображения активного класса в плагинации */\nconst [searchText, setSearchText] = useState('') /* state для фильтрации данных введенных в форму */\nconst [newRow, setNewRow] = useState({})/* state для добавления данных из формы в общую таблицу */\n\nconst [{contactData, isLoading, setContactData, isLoaded}, ] = useServerData ({url, isButtonClick}); /* кастомный хук для изоляции логики отвественной за запрос данных*/\n\n\n\nconst buttonHandler = (url) => {  /* Обработчик события на клик для вывода большого или малого кол-ва данных */\n\tsetUrl(url)\n\tsetIsButtonClick(true)\n}\n\nconst getFiltedData = () => {\n\tif (!searchText) {\n\t\treturn contactData\n\t}\n\treturn contactData.filter(\n\t\tel=> {\n\t\treturn el['firstName'].toLowerCase().includes(searchText.toLowerCase())\n\t\t|| el['lastName'].toLowerCase().includes(searchText.toLowerCase())\n\t\t|| el['email'].toLowerCase().includes(searchText.toLowerCase())\n\t\t}\n\t)\n}\n\nconst filtedData = getFiltedData()\n\nconst lastBlockRow = currentPageNumber*limitCountPage\nconst firstBlockRow = lastBlockRow - limitCountPage+1    /* Обработка массива данных для пагинации страниц */\nconst currentBlockRows = filtedData.slice(firstBlockRow, lastBlockRow)\n\nconst getInputFormData = ({id, firstName, lastName , email, phone}) => {\n\tsetNewRow({id, firstName, lastName , email, phone})\n}\n\ncurrentBlockRows.unshift(newRow)\n\n\nconst currentPage = (pg) => {\n\tsetCurrentPageNumber(pg)\n\tsetbuttonPrevDisabled('')\n\tsetbuttonNextDisabled('')\n\tsetCurrentPageActive('active')\n}\n\nuseEffect(() => { /* хук для пагинации страниц */\n\tif (!isLoaded) {\n\t\treturn\n\t}\n\t\n\tsetTotalCountRow(filtedData.length)\n\tconst getTotalCountPage = Math.ceil(totalCountRow/limitCountPage)\n\tsetTotalCountPage(getTotalCountPage)\n\n}, [isLoaded, setTotalCountRow, filtedData.length, totalCountRow])\n\nlet pages = []\nfor (let i=1; i<=totalCountPage; i++) {\n\tpages.push(i)\n}\n\nconst onSearchSend = (text) => {\n\tsetSearchText(text)\n}\n\nconst sortData = (field) => { /* Сортировка строк */\n\t\n\tconst copyData = contactData.concat(); \n\tlet sortData;\n\tif (directionSort) {\n\tsortData = copyData.sort(\n\t\t(a, b) => {return a[field] > b[field] ? 1 : -1 }\n\t)\n\t} sortData = copyData.reverse(\n\t(a, b) => {return a[field] > b[field] ? 1 : -1 }\n\t)\t\t\t\n\tsetContactData(sortData);   /* функция из хука которая обновляет данные согласно сортировке */\n\tsetDirectionSort(!directionSort);\n}\n\n\t\nconst detailRow = (row) => {\n\tsetrowIsClick(true)\n\tsetrowItem(row);\n}\n\nconst onNextClick = () => {\n\tif (currentPageNumber>totalCountPage-1) {\n\t\tsetbuttonNextDisabled('disabled')\n\t\treturn \n\t}\n\tsetCurrentPageNumber(currentPageNumber+1)\n}\n\nconst onPrevClick = () => {\n\tif (currentPageNumber<2) {\n\t\tsetbuttonPrevDisabled('disabled')\n\t\treturn \n\t}\n\tsetCurrentPageNumber(currentPageNumber-1)\n}\n\n\n\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t{\n\t\t\t\t!isButtonClick ? <Switcher buttonHandler={buttonHandler}/> :\n\t\t\t\t<Tablebody\n\t\t\t\t\tgetInputFormData={getInputFormData}\n\t\t\t\t\tcontactData={currentBlockRows}\n\t\t\t\t\tsortData={sortData}\n\t\t\t\t\trowItem={rowItem}\n\t\t\t\t\tdirectionSort={directionSort}\n\t\t\t\t\tdetailItemData={rowItem}\n\t\t\t\t\tdetailRow={detailRow}\n\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\trowIsClick={rowIsClick}\n\t\t\t\t\tonSearchSend={onSearchSend}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t{ isLoaded && (totalCountRow>limitCountPage) &&\n\t\t\t\t<Paginator \n\t\t\t\tpages={pages}\n\t\t\t\tcurrentPage={currentPage}\n\t\t\t\tonNextClick={onNextClick}\n\t\t\t\tonPrevClick={onPrevClick}\n\t\t\t\tbuttonNextDisabled={buttonNextDisabled}\n\t\t\t\tbuttonPrevDisabled={buttonPrevDisabled}\n\t\t\t\tcurrentPageActive={currentPageActive}\n\t\t\t\tcurrentPageNumber={currentPageNumber}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// reportWebVitals();\n"],"sourceRoot":""}